using System.Collections.Generic;
using System.Linq;
using Sra.P2rmis.Bll.PanelManagement;
using Sra.P2rmis.WebModels.PanelManagement;
using System;
using Sra.P2rmis.Bll;
using Sra.P2rmis.CrossCuttingServices.MessageServices;

namespace Sra.P2rmis.Web.UI.Models
{
    /// <summary>
    /// View model for the Expertise/Assignments tab of the Panel Management applicationl.
    /// </summary>
    public class ExpertiseViewModel : PanelManagementViewModel
    {
        #region Constructor & set up
        /// <summary>
        /// Constructor
        /// </summary>
        public ExpertiseViewModel()
            : base()
        {
            this.ExpertiseGrid = new SortedDictionary<string, List<IReviewerExpertise>>();
            this.PresentationOrderCounts = new Dictionary<int, OrderOfReviewCounts>();
            this.ThresholdRange = Enumerable.Range(1, 15).ToList();
            this.ScientistReviewerSortOrder = ScientistReviewerSortOrder;
            this.AdvocateConsumerSortOrder = AdvocateConsumerSortOrder;
            this.SpecialistReviewerSortOrder = SpecialistReviewerSortOrder;
        }
        /// <summary>
        /// Sets release information from web model generated by service.
        /// </summary>
        /// <param name="model">Panel release information</param>
        internal void SetRelease(IReleasePanelModel model, ISessionApplicationScoringSetupModel scoringModel)
        {
            this.IsReleased = model.IsReleased;
            this.ReleaseDate = model.ReleaseDate;
            this.IsScoringSetUp = scoringModel.IsScoringSetUp;
        }

        #endregion

        #region Properties        
        /// <summary>
        /// the data for expertise grid
        /// </summary>
        public SortedDictionary<string, List<IReviewerExpertise>> ExpertiseGrid { get; set; }
        /// <summary>
        /// The presentation order counts
        /// </summary>
        public Dictionary<int, OrderOfReviewCounts> PresentationOrderCounts { get; set; }
        /// <summary>
        /// The experience counts
        /// </summary>
        public Dictionary<int, ExperienceCounts> ExperienceCounts { get; set; }
        /// <summary>
        /// Gets or sets the assignment type threshold.
        /// </summary>
        /// <value>
        /// The assignment type threshold.
        /// </value>
        public List<IAssignmentTypeThreshold> SetAssignmentTypeThreshold { get; set; }
        /// <summary>
        /// Toggle indicating the session's applications have been released.  In which 
        /// case the Release button should not be shown.
        /// </summary>
        public bool IsReleased { get; set; }
        /// <summary>
        /// Session panel name
        /// </summary>
        public string SessionPanelName { get; set; }
        /// <summary>
        /// Session panel abbreviation
        /// </summary>
        public string SessionPanelAbbr { get; set; }
        /// <summary>
        /// Date & time the applications were release to reviewers.
        /// </summary>
        public DateTime? ReleaseDate { get; set; }
        /// <summary>
        /// Indicates if scoring has bee set up.
        /// </summary>
        public bool IsScoringSetUp { get; set; }
        /// <summary>
        /// Gets the threshold range.
        /// </summary>
        /// <value>
        /// The threshold range.
        /// </value>
        public List<int> ThresholdRange { get; private set; }
        /// <summary>
        /// Gets or sets the scientist reviewer sort order.
        /// </summary>
        /// <value>
        /// The scientist reviewer sort order.
        /// </value>
        public int? ScientistReviewerSortOrder { get; set; }
        /// <summary>
        /// Gets or sets the advocate consumer sort order.
        /// </summary>
        /// <value>
        /// The advocate consumer sort order.
        /// </value>
        public int? AdvocateConsumerSortOrder { get; set; }
        /// <summary>
        /// Gets or sets the specialist reviewer sort order.
        /// </summary>
        /// <value>
        /// The specialist reviewer sort order.
        /// </value>
        public int? SpecialistReviewerSortOrder { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether this instance can support specialist reviewer.
        /// </summary>
        /// <value>
        ///   <c>true</c> if this instance can support specialist reviewer; otherwise, <c>false</c>.
        /// </value>
        public bool CanSupportSpecialistReviewer { get; set; }
        #endregion
        #region Formatting Methods
        /// <summary>
        /// Format for display the presentation order counts
        /// </summary>
        /// <param name="userId">Reviewer's user identifier, used as key into OrderOfReviewCounts count dictionary</param>
        /// <param name="isScientestReviewer">Indicates if the reviewer is a scientist reviewer</param>
        /// <returns>First & second order of review count formatted for display</returns>
        public string FormatPresentationOrder(int userId, bool isSientistReviewer)
        {
            OrderOfReviewCounts presentationCounts = PresentationOrderCounts[userId] as OrderOfReviewCounts;
            string result = string.Empty;

            result = (presentationCounts != null) ? string.Format("{0}/{1}", presentationCounts.FirstReviewerCount, presentationCounts.SecondReviewerCount) : string.Empty;
            return result;
        }
        /// <summary>
        /// Formats the grid cell value displaying the assignment type & review order
        /// </summary>
        /// <param name="assignmentType">Assignment type</param>
        /// <param name="reviewOrder">Review order</param>
        /// <returns>Formatted grid value or empty string if no review order</returns>
        public string FormatExpertise(string assignmentType, int reviewOrder, int? assignmentTypeId)
        {
            return (assignmentTypeId.HasValue && (assignmentTypeId.Value == LookupService.LookupAssignmentTypeIdCoi || !(reviewOrder > 0))) ? assignmentType :
                (reviewOrder > 0) ? string.Format("{0}{1}", assignmentType, reviewOrder) : string.Empty;
        }
        /// <summary>
        /// Formats the experience counts for an application on the panel
        /// </summary>
        /// <param name="applicationRow">List of ReviewerExpertise objects for the application</param>
        /// <returns>Formatted experience counts or empty string if no application found</returns>
        public string FormatExpertise(List<IReviewerExpertise> applicationRow)
        {
            string result = string.Empty;

            if ((applicationRow != null) && (applicationRow.Count() > 0))
            {
                var row = applicationRow[0];
                var rowExperienceCounts = ExperienceCounts[row.ApplicationId];
                if (rowExperienceCounts != null)
                {
                    result = string.Format("{0}/{1}/{2}", rowExperienceCounts.HighCount, rowExperienceCounts.MediumCount, rowExperienceCounts.LowCount);
                }
            }
            return result;
        }
        /// <summary>
        /// Formats the grid cell value displaying the reviewer name
        /// </summary>
        /// <param name="applicationRow">ReviewerExpertise object for the application</param>
        /// <returns>Formatted grid value</returns>
        public string FormatReviewerName(IReviewerExpertise applicationRow) 
        {
            var formattedReviewerName = string.Format("{0}. {1}", applicationRow.ReviewerFirstName[0], applicationRow.ReviewerLastName);
            if (applicationRow.ElevatedChairpersonFlag)
            {
                formattedReviewerName = string.Format("{0}\n({1})", formattedReviewerName, applicationRow.ParticipantTypeName);
            }
            return formattedReviewerName;
        }
        /// <summary>
        /// Formats the release message for the expertise view.
        /// </summary>
        /// <returns></returns>
        public string ReleaseMessage()
        {
            string message = string.Empty;

            if (this.IsReleased)
            {
                if (this.ReleaseDate.HasValue)
                {
                    message = MessageService.ReleaseAssignmentMessage(ReleaseDate.Value);
                }
                else
                {
                    message = MessageService.ReleaseAssignmentMessage();
                }
            }
            else if (!this.IsScoringSetUp)
            {
                message = MessageService.ScoringNotSetup;
            }
            return message;
        }
        #endregion
    }
}