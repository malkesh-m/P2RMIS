
$(function () {
    // On page load, view grid
    $(document).ready(function () {
        if ($('#cycleList').val() === "") { // empty here
        } else {
            $('#Search').click();
        }
        $('#transferDropdownSection').hide();
    });
    // Start of Progress Bar
    window.kendoLoad = function () {
        var element = $('#loading');
        kendo.ui.progress(element, true);
    };
    // End of Progress Bar
    window.kendoUnload = function () {
        var element = $('#loading');
        kendo.ui.progress(element, false);
    }
    function toggleScrollbar(e) {
        var gridWrapper = e.sender.wrapper;
        var gridDataTable = e.sender.table;
        var gridDataArea = gridDataTable.closest(".k-grid-content");
        //remove the scrollbar
        gridDataArea.css('overflow-y','visible');
    }
    // Hide actions
    $("#actions").hide();
    // Find button event
    $("#Search").on("click", function (e) {
        e.preventDefault();
        if (validateSearchInputs()) {
            setTransferGrid();
            $('#grid').show();
            $('#newButtons').show();
            kendoLoad();
        }
    });

    // Set transfer grid data
    function setTransferGrid(fnPostSetGrid) {
        $.ajax({
            url: '/Setup/GetDeliverableDataJson',
            data: {
                clientProgramId: $("#programList option:selected").val(), programYearId: $('#fyList').val(), cycle: $('#cycleList').val()
            }
        }).done(function (results) {
            if (results != "") {
                $('#gridTitle').show();
                $('#formNoResults').hide();
                var newVar = results;
                var dataJson = JSON.stringify(newVar);
                var dataSet = JSON.parse(dataJson);
                var ds = populateDataSource(dataSet);

                var grid = $("#grid").data("kendoGrid");
                window.record = 1; //reset the row counter
                ds.read();
                grid.dataSource.data(ds.data());
                //$("#dataLoaded").html("Data loaded at " + results.RefreshTime);
                // Total data in Grid
                //var sourcedata = ds.data()
                //$('#totalRecords span').text(sourcedata.length);
                // Show actions
                //$("#actions").show();

                if (fnPostSetGrid) {
                    fnPostSetGrid();
                }
            } else {
                kendoUnload();
                $('#grid').hide();
                $('#gridTitle').hide();
                $('#formNoResults').show();
                //hide grid and show no results message
            }
        });
    }

    // Populate meeting data source
    function populateDataSource(dataJson) {
        var dataSource = new kendo.data.DataSource({
            type: "json",
            data: dataJson,
            batch: true,
            pageSize: 20,
            schema: {
                model: {
                    id: "ProgramCycleDeliverableId",
                    fields: {
                        DeliverableName: { type: "string", editable: false },
                        GeneratedDate: { type: "date", editable: false },
                        GeneratedByName: { type: "string", editable: false },
                        QcDate: { type: "date", editable: false },
                        QcName: { type: "string", editable: false },
                        QcFlag: { type: "boolean", editable: false },
                        ClientDataDeliverableId: { type: "number", editable: false },
                        ProgramCycleDeliverableId: { type: "number", editable: false }
                    }
                }
            }
        });
        return dataSource;
    }

    window.record = 0;
    // Transfer grid
    $("#grid").kendoGrid({
        pageable: false,
        height: 450,
        resizable: true,
        navigatable: false,
        batch: true,
        toolbar: ["create"],
        columns: [
            {
                filterable: false, title: "#", width: "3%",
                template: '#= record++ #', sortable: false
            },
            { field: "DeliverableName", filterable: false, title: "Deliverable", width: "14%", template: "# if (GeneratedDate != null) {# <a href='\\#' onclick='showFileDownloadWarning(undefined,undefined,\"/Setup/DownloadDataDeliverable?programCycleDeliverableId=#=ProgramCycleDeliverableId#\")'>${DeliverableName}</a> #}else {# #= DeliverableName # # } #" },
            { field: "GeneratedDate", filterable: false, title: "Generated", width: "12%", template: "<div class='alignCenter'># if (GeneratedDate != null) {# #= kendo.toString(kendo.parseDate(GeneratedDate), 'MM/dd/yyyy')# #}else{# - #} #</div>" },
            { field: "GeneratedByName", filterable: false, title: "Generated By", width: "14%", template: "# if (GeneratedByName != '') {# #= GeneratedByName # #}else{# <div class='alignCenter'>-</div> #} #" },
            { field: "QcDate", filterable: false, title: "Last QC", width: "12%", template: "<div class='alignCenter'># if (QcDate != null) {# #= kendo.toString(kendo.parseDate(QcDate), 'MM/dd/yyyy')# #}else{# - #} #</div>" },
            { field: "QcName", filterable: false, title: "QC By", width: "14%", template: "# if (QcByName != '') {# #= QcByName # #}else{# <div class='alignCenter'>-</div> #} #" },
            { field: "QcFlag", filterable: false, title: "<div class='alignCenter'>QC Complete</div>", width: "12%", template: '<div class="alignCenter"><input type="checkbox" style="margin-left: 1px;" data-programdeliverableid="${ProgramCycleDeliverableId}" class="qcCheck" # if (GeneratedDate == null){ # disabled = "disabled" # } # # if (QcFlag){ # checked # } # /></div>', sortable: false },
            { field: "ClientDataDeliverableId", filterable: false, title: "<div class='alignCenter'>Action</div>", width: "12%", template: "<div class='alignCenter'><button class='generateButton scorecardButton' type='button' id='generate_${ClientDataDeliverableId}'>Generate</button></div>", sortable: false },
            { field: "ProgramYearId", hidden: true },
            { field: "ReceiptCycle", hidden: true }
        ],
        editable: false,
        scrollable: true,
        groupable: false,
        sortable: true,
        dataBound: function (e) {
            kendoUnload();
            window.record = 1;
            toggleScrollbar(e);
        },
        filterable: {
            extra: false,
            operators: {
                string: {
                    startswith: "Starts with",
                    eq: "Is equal to",
                    neq: "Is not equal to"
                }
            }
        }
    });

    // Refresh button handler
    $('a.k-pager-refresh').on('click', function (e) {
        e.preventDefault();
        setTransferGrid();
    });
    function gridRefresh() {
        $('a.k-pager-refresh').click();
    }
    // QC button handler
    $('#grid').on('click', '.qcCheck', function () {
        if ($(this).is(':checked')) {
            var deliverableId = $(this).attr('data-programdeliverableid');
            var qcNameCell = $(this).closest('tr').find('td:nth-child(6)');
            var qcDateCell = $(this).closest('tr').find('td:nth-child(5)');
            $.ajax({
                url: '/Setup/MarkDeliverableQcJson',
                data: {
                    programCycleDeliverableId: deliverableId
                }
            }).success(function (result) {
                if (result.success == true) {
                    //set success message
                    $('#successMessage').hide();
                    $('#warningAlert').hide();
                    //populate grid records
                    qcNameCell.html(result.qcName);
                    qcDateCell.html('<div class="alignCenter">' + result.qcDate + '<div>');
                } else {
                    //set failure message
                    $('#successMessage').hide();
                    $("#warningAlert").html("There was an error marking the deliverable as QC'd. Please try again.").show();
                }
            });
        }
    });
    // Generate button handler
    $('#grid').on('click', '.generateButton', function (e) {
        var deliverableId = this.id.replace("generate_", "");
        var generateNameCell = $(this).closest('tr').find('td:nth-child(4)');
        var generateDateCell = $(this).closest('tr').find('td:nth-child(3)');
        var qcCell = $(this).closest('tr').find('td:nth-child(7) input');
        var qcNameCell = $(this).closest('tr').find('td:nth-child(6)');
        var qcDateCell = $(this).closest('tr').find('td:nth-child(5)');
        var deliverableNameCell = $(this).closest('tr').find('td:nth-child(2)');
        var deliverableName = deliverableNameCell.text();
        // Get programYearId and receiptCycle from grid
        var grid = $("#grid").data("kendoGrid");
        var idx = $(e.target).closest("tr").index();
        var dataItem = grid.dataSource.view()[idx];
        $.ajax({
            url: '/Setup/GenerateDeliverableJson',
            data: {
                programYearId: dataItem.ProgramYearId, receiptCycle: dataItem.ReceiptCycle, clientDeliverableId: deliverableId
            }
        }).success(function (result) {
            if (result.success == true) {
                //set success message
                $('#warningAlert').hide();
                $('#successMessage').text(deliverableName + ' data generated successfully.').show();
                //populate grid records
                generateNameCell.html(result.generateName);
                generateDateCell.html('<div class="alignCenter">' + result.generateDate + '<div>');
                //reset QC info and allow new QC
                qcCell.prop('checked', false);
                qcCell.removeProp('disabled');
                qcCell.attr('data-programdeliverableid', result.newDeliverableId);
                qcNameCell.html("<div class='alignCenter'>-</div>");
                qcDateCell.html("<div class='alignCenter'>-</div>");
                deliverableNameCell.html("<a href='#' onclick='showFileDownloadWarning(undefined,undefined,\"/Setup/DownloadDataDeliverable?programCycleDeliverableId=" + result.newDeliverableId + "\")'>" + deliverableName + "</a>");
            } else {
                //set failure message
                $('#successMessage').hide();
                $('#warningAlert').text('There was an error generating the data. Please try again.').show();
            } 
        }).error(function (xhr, ajaxOptions, thrownError) {
            $('#successMessage').hide();
            $("#warningAlert").html("There was an error generating the data. Please try again.").show();
        });
    });

    $('#clearButton').on('click', function () { $("form.k-filter-menu button[type='reset']").trigger("click"); });
});
