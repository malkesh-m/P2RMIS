@using Sra.P2rmis.CrossCuttingServices
@using Sra.P2rmis.CrossCuttingServices.ConfigurationServices
@using Sra.P2rmis.Web.UI.Models
@model Sra.P2rmis.Web.UI.Models.PasswordManagementViewModel

@{
    ViewBag.Title = "Manage Password";
    ViewBag.PageTitle = Sra.P2rmis.Web.UI.Models.PasswordManagementViewModel.Tab2;
    const string PlaceHolderEditText = "Modify ";
    string PasswordChangeGuideLines = string.Format("<br/>P<span style='vertical-align: super;'>2</span>RMIS application security requirements necessitate that passwords must be changed every {0} days.", ConfigManager.PwdNumberDaysBeforeExpire.ToString());
    var securityQuestionChoiceGuidelines = "In addition, to ensure the security of your account, please choose 3 security questions and provide your answers below.";
    var securityQuestionMgmtGuidelines = "In addition, you can manage your security questions and answers by updating them below as needed.";
}
<style type="text/css">
    .redColor {
        color: red;
        list-style: none;
    }
</style>
<div class="shared_mw_tabs">
    @if (Model.LastPageUrl != "")
    {
        <span class="shared_mw_tabs_back-arrow">
            <a id="backButton" href="@Model.LastPageUrl">
                <img src="~/Content/img/backarrow_20px_enabled.png" align="middle" border="0"
                     alt="Go Back to Previous Page" title="Back" />
            </a>
        </span>
    }
    <h1 class="shared_mw_tabs_h1">@Model.MenuTitle</h1>
    <br />
</div>

@using (Html.BeginForm("PasswordManagement", "UserProfileManagement", FormMethod.Post, new { @class = "form-horizontal", @id = "savePassword", @name = "savePassword" }))
{
<div class="row-fluid">
    <a href="#passwordSaveButton" class="pull-right">Skip to Save/Cancel</a>
    @Html.Partial("_PrivilegedTabMenu")
</div>
    <div id="mainContent">
        <div class="container-fluid">
            <div class="row-fluid">
                <div class="hidden-text" id="newMessages"></div>
                @{
                    var count = 0;
                    foreach (var answer in Model.SecurityInfo.SecurityQuestionsAndAnswers)
                    {
                        if (answer.AnswerText != null)
                        {
                            count++;
                        }
                    }
                }

                @if (Model.SecurityInfo.EffectiveDaysUntilPasswordExpiration == 0)
                {
                    <div class="alignLeft" id="changePasswordMessage" tabindex="-1"><strong>Your password will expire today. Please create a new password using the guidelines below. @Html.Raw(PasswordChangeGuideLines)<br />@Html.Raw(securityQuestionMgmtGuidelines)</strong></div>
                }
                else if (Model.SecurityInfo.EffectiveDaysUntilPasswordExpiration < 0)
                {
                    <div class="alignLeft" id="changePasswordMessage" tabindex="-1"><strong>Your password has expired. Please reset your password using the guidelines below. @Html.Raw(PasswordChangeGuideLines)<br />@Html.Raw(securityQuestionMgmtGuidelines)</strong></div>
                }
                else if (Model.SecurityInfo.EffectiveDaysUntilPasswordExpiration > 0)
                {
                    if (Model.SecurityInfo.TemporaryPassword == true)
                    {
                        if (count == 0)
                        {
                            <div class="alignLeft" id="changePasswordMessage" tabindex="-1"><strong>Please change your temporary password to a new permanent password using the guidelines below.@Html.Raw(PasswordChangeGuideLines)<br />@Html.Raw(securityQuestionChoiceGuidelines)</strong></div>
                        }
                        else
                        {
                            <div class="alignLeft" id="changePasswordMessage" tabindex="-1"><strong>Please change your temporary password to a new permanent password using the guidelines below.@Html.Raw(PasswordChangeGuideLines)<br />@Html.Raw(securityQuestionMgmtGuidelines)</strong></div>
                        }
                    }
                    else
                    {
                        var warningDaysLeft = ConfigManager.PwdNumberDaysBeforeExpire - ConfigManager.PwdNumberDaysBeforeNotice;
                        if (Model.SecurityInfo.EffectiveDaysUntilPasswordExpiration <= warningDaysLeft)
                        {
                            <div class="alignLeft" id="changePasswordMessage" tabindex="-1"><strong>Your password expires in @(Model.SecurityInfo.EffectiveDaysUntilPasswordExpiration) days.  Please create a new password using the guidelines below.@Html.Raw(PasswordChangeGuideLines)<br />@Html.Raw(securityQuestionMgmtGuidelines)</strong></div>
                        }
                        else
                        {
                            <div class="alignLeft" id="changePasswordMessage" tabindex="-1"><strong>You can change your existing password to a new password using the guidelines below. @Html.Raw(PasswordChangeGuideLines)<br />@Html.Raw(securityQuestionMgmtGuidelines)</strong></div>
                        }
                    }
                }
                else
                {
                    <div class="alignLeft" id="changePasswordMessage"><strong>You can change your existing password to a new password using the guidelines below. @Html.Raw(PasswordChangeGuideLines)<br />@Html.Raw(securityQuestionMgmtGuidelines)</strong></div>
                }
            </div>

            @Html.ValidationSummary()

            <div class="row-fluid padding-top10 padding-bottom10">
                <p>Notifications for @Model.SecurityInfo.Username will be sent to: @Model.SecurityInfo.PrimaryEmail.</p>
            </div>
            <div class="row-fluid">

                <!-- Change Password -->
                <section class="upm-ma-section-password" role="region" aria-labelledby="change-pass-mp">
                    <span class="upm-profile-section_header" id="change-pass-mp">Change Password</span>
                    <span class="upm-profile-section_required">All fields are required in order to change password.</span>
                    <span class="upm-profile-section_required">Last Updated: @Model.PasswordLastUpdateDateFormatted</span>
                    <div class="upm-profile-section_container">
                        <!-- Current Password -->
                        <div class="upm-profile-section_field">
                            <label for="currentPasswordInput" class="upm-profile-section_field">Current Password <div class="hidden-text">Required</div></label>
                            @Html.PasswordFor(x => x.SecurityInfo.CurrentPassword, new { placeholder = "Current Password", @id = "currentPasswordInput", @class = "upm-profile-section_field_input-short" })
                        </div>
                        <!-- New Password -->
                        <div class="upm-profile-section_field">
                            <span class="sr-only">Middle Iniital</span>
                            <label for="newPasswordInput" class="upm-profile-section_field">New Password <div class="hidden-text">Required</div></label>
                            @Html.PasswordFor(x => x.SecurityInfo.NewPassword, new { placeholder = "New Password", @id = "newPasswordInput", @class = "upm-profile-section_field_input-short" })
                        </div>
                        <!-- Re-Type Password -->
                        <div class="upm-profile-section_field">
                            <label for="confirmPasswordInput" class="upm-profile-section_field">Re-type Password<div class="hidden-text">Required</div></label>
                            @Html.PasswordFor(x => x.ConfirmPassword, new { placeholder = "Re-type Password", @id = "confirmPasswordInput", @class = "upm-profile-section_field_input-short" })
                        </div>
                    </div>
                    @Html.HiddenFor(x => x.SecurityInfo.UserId)
                    @Html.HiddenFor(x => x.PasswordLastUpdateDateFormatted)
                    @Html.HiddenFor(x => x.SecurityLastUpdateDateFormatted)
                    @Html.HiddenFor(x => x.SecurityInfo.Username)
                    @Html.HiddenFor(x => x.SecurityInfo.FirstName)
                    @Html.HiddenFor(x => x.SecurityInfo.LastName)
                    @Html.HiddenFor(x => x.SecurityInfo.PrimaryEmail)
                    @Html.HiddenFor(x => x.SecurityInfo.TemporaryPassword)
                    @Html.HiddenFor(x => x.SecurityInfo.EffectiveDaysUntilPasswordExpiration)
                </section>

                <!-- Password Guidelines -->
                <section class="upm-ma-section-guidelines" role="region" aria-labelledby="password-mp">
                    <span class="upm-profile-section_header" id="password-mp">Password Guidelines</span>
                    <span class="upm-profile-section_required">A valid password must be unique from the User Name and must comply with the following guidelines:</span>
                    <ul>
                        <li>Passwords must have a minimum of @ConfigManager.PwdMinLength and a maximum of @ConfigManager.PwdMaxLength characters</li>
                        <li>
                            Passwords must use all 4 of the following types of characters
                            <ul>
                                <li class="listStyleTypeCircle">At least one upper case letter (A-Z)</li>
                                <li class="listStyleTypeCircle">At least one lower case letter (a-z)</li>
                                <li class="listStyleTypeCircle">At least one number (0-9)</li>
                                <li class="listStyleTypeCircle">At least one special character (!@@#$%&*()_+|~{}[]:”;’<>?,./)</li>
                            </ul>
                        </li>
                        <li>Passwords must not contain more than 4 repeating characters</li>
                        <li>Passwords must not contain user's first name, last name, email, or username</li>
                    </ul>
                    <span class="upm-profile-section_required">Additionally, passwords SHOULD NOT contain:</span>
                    <ul>
                        <li>A single word with a digit appended to the beginning or ending of the word (e.g. Hairdresser1, 1hairDresser)</li>
                        <li>A keyboard series of characters (e.g., Qwertyuiop*1)</li>
                        <li>Personally identifiable information such as names of family members, friends or pets, license plate number, phone numbers, birthdays, or addresses, etc.</li>
                        <li>A repeated character or a series of characters (e.g. 123456, 111111, aaabbb, abcdef, etc.)</li>
                    </ul>
                </section>

                <!-- Security Questions -->
                <section class="upm-ma-section-security" role="region" aria-labelledby="security-mp">
                    <span class="upm-profile-section_header" id="security-mp">Security</span>
                    <span class="upm-profile-section_required">All fields are required in order to set security questions.</span>
                    <span class="upm-profile-section_required alignRight">Last Updated: @Model.SecurityLastUpdateDateFormatted</span>
                    <div class="upm-profile-section_container margin-top10">
                        @for (var i = 0; i < Model.SecurityInfo.SecurityQuestionsAndAnswers.Count; i++)
                        {
                            var iLabel = i + 1;
                            string placeHolderPredicate = Model.SecurityInfo.SecurityQuestionsAndAnswers[i].UserAccountRecoveryId > 0 ? PlaceHolderEditText : string.Empty;
                            <div class="row-fluid securityControls">
                                <div class="control-group">
                                    @Html.LabelFor(x => x.SecurityInfo.SecurityQuestionsAndAnswers[i].RecoveryQuestionId, PasswordManagementViewModel.FieldLabels.Question + iLabel, new { @class = "control-label boldWeight" })
                                    <div class="controls">
                                        @Html.DropDownListFor(x => x.SecurityInfo.SecurityQuestionsAndAnswers[i].RecoveryQuestionId, new SelectList(Model.QuestionDropdown, "Index", "Value", @Model.SecurityInfo.SecurityQuestionsAndAnswers[i].RecoveryQuestionId), "Select", new { @class = "dropdown" })
                                        @Html.LabelFor(x => x.SecurityInfo.SecurityQuestionsAndAnswers[i].AnswerText, "Answer to question " + iLabel + " is required. ", new { @class = "sr-only" })
                                        @Html.TextBoxFor(x => x.SecurityInfo.SecurityQuestionsAndAnswers[i].AnswerText, new { @class = "answer", Placeholder = placeHolderPredicate + PasswordManagementViewModel.FieldLabels.Answer + iLabel, maxlength = "50", @style = "width:25ch;" })
                                        @Html.HiddenFor(x => x.SecurityInfo.SecurityQuestionsAndAnswers[i].IsModified)
                                    </div>
                                </div>
                            </div>
                            @Html.HiddenFor(x => x.SecurityInfo.SecurityQuestionsAndAnswers[i].UserAccountRecoveryId)
                        }
                    </div>
                </section>
            </div>
            <div class="row-fluid">
                <div class="span6">
                    <label for="passwordSaveButton" class="sr-only">Save Manage Account page</label>
                    <input type="submit" value="Save" class="btn btn-primary pull-right" id="passwordSaveButton" />
                </div>
                <div class="span6">
                    &nbsp;<div class="hidden-text">changes and restart Manage Account page</div>
                    <label for="passwordCancelButton" class="sr-only">Save Manage Account page</label>
                    <input type="button" value="Cancel" class="btn btn-primary" id="passwordCancelButton" />
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="saveSuccessMessage" value="@TempData[ViewHelpers.Constants.SuccessMessageKey]" />
    <input type="hidden" id="isSaved" value="@TempData.ContainsKey(ViewHelpers.Constants.SuccessMessageKey)" />
}

    <script type="text/javascript">
    $(function () {

        $("div.validation-summary-errors ul li:contains('Question is required')").remove();
        $("div.validation-summary-errors ul li:contains('Answer is required')").remove();

        //reveal success message
        if ($('#isSaved').val()) {
            $('#newMessages').removeClass('hidden-text').append('<ul class="span10 alignLeft saveSuccessful list-unstyled padding10" id="saveSuccessContainer" role="alert"><li>' + $('#saveSuccessMessage').val() + '</li></ul>');
        } else {
            $('#changePasswordMessage').focus();
        };

        //add a value of 0 to the optionLabel
        $('.dropdown').each(function (index, value) {
            $(this).children("option:first").val(0);
        });
        $('.dropdown').change(function () {
            //if a question changes, clear out the answer
            var answerInput = $(this).siblings(".answer").first();
            $(this).siblings("input[name$='IsModified']").val('true');
            answerInput.val('');
            answerInput.attr("placeholder", answerInput.attr("placeholder").replace("Modify ", ""));
        });

        // Clear form
        $("#passwordCancelButton").on("click", function (e) {
            $('#savePassword')[0].reset();
        });

        // If submitting from Security Questions
        $('.controls input').keyup(function (e) {
            if (e.keyCode === 13) { // The Enter/Return key
                $('#savePassword').submit();
            }
        });

        $(".answer").on("keyup", function () {
            if ($(this).val() == "") {
                $(this).parent().parent().parent().find("input[name$='IsModified']").val('true');
                $(this).attr("placeholder", $(this).attr("placeholder").replace("Modify ", ""));
            }
        });
    });
    </script>