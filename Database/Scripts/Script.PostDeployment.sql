/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
			   SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*
 Use sp_generate_merge to create merge statements (Scripts/Miscellaneous/sp_generate_merge.sql)
 Syntax example: EXEC sp_generate_merge 'LookupAddressType'
 Use results to grid and click xml link to generate the text for the statement
*/


--Scripts for initial data from P2RMIS
--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

SET NOCOUNT ON
--must be run before lookup updates as this script deletes a reference to an index value 
--that will be deleted when assoicated lookup script executes

--LookupData (alphabetical order)
:r ./LookupData/AcademicRank.sql
:r ./LookupData/AccessLevel.sql
:r ./LookupData/AccountStatus.sql
:r ./LookupData/AccountStatusReason.sql
:r ./LookupData/ActionLogReason.sql
:r ./LookupData/AddressType.sql
:r ./LookupData/AlternateContactType.sql
:r ./LookupData/AssignmentType.sql
:r ./LookupData/SummaryStatementMode.sql
:r ./LookupData/Client.sql
:r ./LookupData/CommunicationMethod.sql
:r ./LookupData/CommunicationLogRecipientType.sql
:r ./LookupData/ComplianceStatus.sql
:r ./LookupData/ContractStatus.sql
:r ./LookupData/Country.sql
:r ./LookupData/Degree.sql
:r ./LookupData/ElementType.sql
:r ./LookupData/EmploymentCategory.sql
:r ./LookupData/EmailAddressType.sql
:r ./LookupData/Ethnicity.sql
:r ./LookupData/Gender.sql
:r ./LookupData/CommentType.sql
:r ./LookupData/LookupReportGroup.sql
:r ./LookupData/LookupReportParameter.sql
:r ./LookupData/LookupTemplateCategory.sql
:r ./LookupData/LookupTemplateStage.sql
:r ./LookupData/LookupTemplateType.sql
:r ./LookupData/MechanismRelationshipType.sql
:r ./LookupData/MeetingType.sql
:r ./LookupData/MilitaryRank.sql
:r ./LookupData/MilitaryStatusType.sql
:r ./LookupData/NomineeAffected.sql
:r ./LookupData/NomineeType.sql
:r ./LookupData/RecoveryQuestion.sql
:r ./LookupData/RegistrationDocumentType.sql
:r ./LookupData/ParticipationMethod.sql
:r ./LookupData/PhoneType.sql 
:r ./LookupData/Prefix.sql
:r ./LookupData/ProfessionalAffiliation.sql
:r ./LookupData/ProfileType.sql
:r ./LookupData/ProfileTypeRole.sql 
:r ./LookupData/ResearchCategoryType.sql 
:r ./LookupData/ReviewStage.sql 
:r ./LookupData/ReviewStatusType.sql 
:r ./LookupData/State.sql
:r ./LookupData/StepType.sql
:r ./LookupData/SystemRole.sql
:r ./LookupData/SummaryDocument.sql 
:r ./LookupData/SummaryReviewerDescription.sql 
:r ./LookupData/SystemConfiguration.sql
:r ./LookupData/SystemTemplate.sql 
:r ./LookupData/SystemTemplateVersion.sql
:r ./LookupData/TrainingCategory.sql
:r ./LookupData/TransferReason.sql
:r ./LookupData/TravelMode.sql
:r ./LookupData/UserInfoChangeType.sql
:r ./LookupData/VendorType.sql
:r ./LookupData/WebsiteType.sql 
:r ./LookupData/RegistrationDocumentItem.sql
:r ./LookupData/PeerReviewContentType.sql
:r ./LookupData/PeerReviewDocumentType.sql
--Semi-Lookup Data (some dependency but not user editable)

:r ./LookupData/ClientApplicationInfoType.sql
:r ./LookupData/ClientApplicationTextType.sql
:r ./LookupData/ClientAssignmentType.sql
:r ./LookupData/ClientDefaultWorkflow.sql
:r ./LookupData/ClientRegistration.sql
:r ./LookupData/ClientRegistrationDocument.sql
:r ./LookupData/ClientRegistrationDocumentItem.sql
:r ./LookupData/ReviewStatus.sql 
:r ./LookupData/ClientExpertiseRating.sql
:r ./LookupData/ClientCoiType.sql
:r ./LookupData/ReviewStatus.sql 
:r ./LookupData/ClientReviewerEvaluationGroup.sql
:r ./LookupData/ReviewerEvaluationGroupGuidance.sql
--:r ./TestData/Workflow.sql
--:r ./TestData/WorkflowStep.sql
:r ./LookupData/ClientScoringScaleLegend.sql
:r ./LookupData/ClientScoringScaleLegendItem.sql
:r ./LookupData/ScoringTemplate.sql
:r ./LookupData/ScoringTemplatePhase.sql
:r ./LookupData/ClientDataDeliverable.sql
:r ./LookupData/ClientTransferType.sql
--:r ./TestData/UserInfoChangeLog.sql




--Report Data
:r ./LookupData/Report.sql
:r ./LookupData/ReportPermission.sql
:r ./LookupData/ReportParameter.sql
 
 --Permissions (dependency order)
 :r ./PermissionsData/SystemTask.sql
 :r ./PermissionsData/SystemOperation.sql
 :r ./PermissionsData/RoleTask.sql
 :r ./PermissionsData/TaskOperation.sql
 --Lookup/permission data
 :r ./LookupData/StepTypeOperation.sql
 /* Test data Uncomment if re-building database

 :r ./TestData/Workflow.sql
 :r ./TestData/WorkflowStep.sql
 :r ./TestData/WorkflowMechanism.sql
 :r ./TestData/ClientElement.sql
 :r ./TestData/ClientDefaultWorkflow.sql
 :r ./TestData/ClientScoringScale.sql
 :r ./TestData/ClientScoringScaleAdjectival.sql
 :r ./TestData/MechanismTemplate.sql
 :r ./TestData/MechanismTemplateElement.sql
 :r ./TestData/User.sql
 :r ./TestData/UserInfo.sql
 :r ./TestData/UserAddress.sql
 :r ./TestData/UserClient.sql
 :r ./TestData/UserEmail.sql
 :r ./TestData/UserPhone.sql
 :r ./TestData/UserSystemRole.sql
 */

 /* User Security Policy Data*/
 :r ./LookupData/PolicyType.sql
 :r ./LookupData/PolicyRestrictionType.sql
 :r ./LookupData/WeekDay.sql

SET NOCOUNT OFF

GO










 ------------------------------------------------------------------------------------------------------------------
 ------------------------------------------------------------------------------------------------------------------
 ------------------------------------------------------------------------------------------------------------------
 --ETL Script Execution
 --Check if the script has been ran based on records in the table (might be able to use some extended property too)
 --First disable all triggers

 EXEC sp_msforeachtable 'ALTER TABLE ? DISABLE TRIGGER all'
 GO
IF (SELECT Count(*) FROM ClientSummaryTemplate) < 5
BEGIN
PRINT 'Initial population of ClientSummaryTemplate table' 
:r ./ETL/ClientSummaryTemplate.sql
END
GO
IF (SELECT Count(*) FROM ProgramMechanismSummaryStatement WHERE ClientSummaryTemplateId IS NOT NULL) < 5
BEGIN
PRINT 'Mapping ProgramMechanismSummaryStatement fk relationships for new table'
:r ./SchemaDataUpdate/PopulateClientSummaryTemplateIdFk.sql
END
GO
IF EXISTS (SELECT 'X'
FROM ClientFileConfiguration
WHERE FileSuffix = 'SOW' AND BINARY_CHECKSUM(FileSuffix) = 22439)
BEGIN
PRINT 'Normalizing client file suffixes'
:r ./SchemaDataUpdate/NormalizeFileSuffix.sql
END
GO
IF EXISTS (SELECT 'X' FROM ViewPanelStage WHERE SessionPanelId = 4829 AND ReviewStageId = 2)
BEGIN
PRINT 'Fixing online panel stages for BAA'
:r ./SchemaDataUpdate/FixOnlinePanelStages.sql
END
GO
IF EXISTS (SELECT 'X' FROM ViewApplication WHERE ParentApplicationId IS NULL AND ProgramMechanismId = 3423)
BEGIN
PRINT 'Mapping FPA component applications to parent'
:r ./SchemaDataUpdate/MapFpaParentToComponentApps.sql
END
GO
IF EXISTS (SELECT 'X' FROM ApplicationPersonnel WHERE DeletedFlag = 0 AND FirstName IS NULL AND LastName IS NULL AND OrganizationName IS NULL)
BEGIN
PRINT 'Running COI data fixes';
:r ./SchemaDataUpdate/ApplicationPersonnelCoiFixes.sql
END
GO
IF (SELECT Count(*) FROM ViewMeetingRegistrationHotel WHERE HotelNotRequiredFlag = 1 AND ModifiedDate < '3/14/2019') > (SELECT Count(*) FROM ViewMeetingRegistrationHotel WHERE HotelNotRequiredFlag = 0 AND ModifiedDate < '3/14/2019')
BEGIN
PRINT 'Fixing HotelNotRequired legacy data'
:r ./SchemaDataUpdate/HotelNotRequiredDataFix.sql
END
GO
IF EXISTS (SELECT 'X' FROM WorkflowStep WHERE  (StepName = 'Client Review') AND (WorkflowId = 2 OR WorkflowId = 3) AND DeletedFlag = 0)
BEGIN
PRINT 'Soft deleting Client review phase for CDMRP'
:r ./SchemaDataUpdate/WorkflowStepUpdates.sql
END
GO
IF EXISTS (SELECT 'X' FROM PanelApplicationReviewerExpertise
INNER JOIN ViewPanelUserAssignment ON PanelApplicationReviewerExpertise.PanelUserAssignmentId = PanelApplicationReviewerExpertise.PanelUserAssignmentId
WHERE ClientExpertiseRatingId IS NULL AND ViewPanelUserAssignment.ClientParticipantTypeId = 209)
BEGIN
:r ./SchemaDataUpdate/CpritChairNoCoiExpertiseFix.sql
END
IF (SELECT Count(*) FROM NominatingOrganization) < 5
BEGIN
:r ./ETL/NominatingOrganization.sql
END

-- This is one time update. 
IF (SELECT COUNT(ApplicationBudgetId) FROM ApplicationBudget WHERE (Comments IS NOT NULL) AND (Comments <> '') AND (DeletedFlag = 0) AND (CommentModifiedDate IS NULL) AND (ModifiedDate IS NOT NULL)) > 0
BEGIN
PRINT 'Fixing ApplicationBudget Comments legacy data'
:r ./DataManagement/ApplicationBudgetCommentUpdate.sql
END
GO

IF EXISTS (Select 'X' FROM WorkflowStep WHERE WorkflowId = 155 AND StepName = 'Editing-2' AND StepOrder = 7 AND DeletedFlag = 0)
BEGIN
PRINT 'Updating SOCOM workflow to match CDMRP'
:r ./SchemaDataUpdate/WorkflowUpdate_SOCOM.sql
END
GO
IF EXISTS (Select 'X' FROM WorkflowStep WHERE StepName = 'SMR' AND StepTypeId = 9 AND DeletedFlag = 0)
BEGIN
PRINT 'Updating StepTypeId of SMR and SMR-2 phases so it no longer is enabled/disabled by priority 1 updates'
:r ./SchemaDataUpdate/SMRStepTypeFixes.sql
END
GO
-- Another one-time update
IF (SELECT count(ns.NomineeSponsorId) FROM NomineeSponsor AS ns INNER JOIN NominatingOrganization AS nor ON ns.Organization = nor.OrganizationName
        where ns.OrganizationId is null) > 0
BEGIN
PRINT 'Fixing NomineeSponsor legacy data'
:r ./DataManagement/NomineeSponsorOrgIdUpdate.sql 
END
GO

IF NOT EXISTS (Select 'X' FROM ProgramSessionPayRate)
BEGIN
PRINT 'Initial data load of ProgramSessionPayRate combined pay rate table'
:r ./ETL/ProgramSessionPayRate.sql
END
GO

IF (SELECT Count(*) FROM PanelUserRegistrationDocumentContract) < 500
BEGIN
:r ./SchemaDataUpdate/PopulateCurrentPayRates.sql
END
GO

IF EXISTS (Select 'X' FROM WorkflowStep WHERE WorkflowStepId= 4 AND StepOrder=4 AND DeletedFlag = 0)
BEGIN
PRINT 'Updating CDMRP Workflow'
:r ./SchemaDataUpdate/WorkflowUpdate_CDMRP.sql
END
GO

IF EXISTS (Select 'X' FROM WorkflowStep WHERE WorkflowStepId= 662 AND StepOrder=4 AND DeletedFlag = 0)
BEGIN
PRINT 'Updating CDMRP Workflow'
:r ./SchemaDataUpdate/WorkflowUpdate_Online_CDMRP.sql
END
GO

 --***************User Resume Full-text Linked server scripts***************
 --We do not want to add trigger or load data if the linked server is a loopback (pointer to current server)
 --Need to use lots of dynamic sql to generate these objects due to limitation in SSDT and linked server/full text search
 --See Miscellaneous/FullTextSearchRemoteObjects.sql for creating dependencies on remote server
IF OBJECTPROPERTY(OBJECT_ID('UserResumeLinkedServerTrigger'), 'IsTrigger') = 1
    DROP TRIGGER UserResumeLinkedServerTrigger
GO
 IF '[$(LinkedServerName)]' <> 'loopback'
 BEGIN
 :r ./Miscellaneous/UserResumeLinkedServerTrigger.sql
 END
 GO
 IF '[$(LinkedServerName)]' <> 'loopback' AND (SELECT Count(*) FROM [$(LinkedServerName)].[$(DatabaseName)].dbo.UserResume) = 0
 BEGIN
 PRINT 'Populating linked server resume table'
 :r ./ETL/UserResumeLinkedServer.sql
 END
 GO
 --**************End User Resume full-text scripts**************************
 
--Finally re-enable all triggers
 EXEC sp_msforeachtable 'ALTER TABLE ? ENABLE TRIGGER all'
 GO

 